Traceback (most recent call last):
  File "/home/lukask/anaconda3/envs/jb/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/lukask/anaconda3/envs/jb/lib/python3.11/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/lukask/anaconda3/envs/jb/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 173, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/lukask/anaconda3/envs/jb/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/lukask/anaconda3/envs/jb/lib/python3.11/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/home/lukask/anaconda3/envs/jb/lib/python3.11/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/lukask/anaconda3/envs/jb/lib/python3.11/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from sklearn.preprocessing import PolynomialFeatures
from scipy.optimize import minimize

# Polynomial basis function for x
poly = PolynomialFeatures(degree=7)
x_poly = poly.fit_transform(x[:, np.newaxis])

# Define loss function for polynomial regression
def poly_loss(params, x_poly, y):
    return np.sum((y - np.dot(x_poly, params))**2)

# Initial guess for polynomial coefficients
initial_guess_poly = np.zeros(x_poly.shape[1])

# Minimize loss
result_poly = minimize(poly_loss, initial_guess_poly, args=(x_poly, y_non_linear))

# Predicted polynomial coefficients
poly_coeffs = result_poly.x

# Generate polynomial fit
yfit_poly = np.dot(poly.fit_transform(xfit[:, np.newaxis]), poly_coeffs)

# Plot the polynomial fit
sns.scatterplot(x=x, y=y_non_linear)
plt.plot(xfit, yfit_poly, color='r')
plt.show()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[3], line 16[0m
[1;32m     13[0m initial_guess_poly [38;5;241m=[39m np[38;5;241m.[39mzeros(x_poly[38;5;241m.[39mshape[[38;5;241m1[39m])
[1;32m     15[0m [38;5;66;03m# Minimize loss[39;00m
[0;32m---> 16[0m result_poly [38;5;241m=[39m minimize(poly_loss, initial_guess_poly, args[38;5;241m=[39m(x_poly, y_non_linear))
[1;32m     18[0m [38;5;66;03m# Predicted polynomial coefficients[39;00m
[1;32m     19[0m poly_coeffs [38;5;241m=[39m result_poly[38;5;241m.[39mx

[0;31mNameError[0m: name 'y_non_linear' is not defined

